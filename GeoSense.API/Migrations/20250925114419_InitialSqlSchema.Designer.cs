// <auto-generated />
using System;
using GeoSense.API.Infrastructure.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GeoSense.API.Migrations
{
    [DbContext(typeof(GeoSenseContext))]
    [Migration("20250925114419_InitialSqlSchema")]
    partial class InitialSqlSchema
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GeoSense.API.Infrastructure.Persistence.AlocacaoMoto", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DataHoraAlocacao")
                        .HasColumnType("datetime2")
                        .HasColumnName("DATA_HORA_ALOCACAO");

                    b.Property<long>("MecanicoResponsavelId")
                        .HasColumnType("bigint")
                        .HasColumnName("MECANICO_RESPONSAVEL_ID");

                    b.Property<long>("MotoId")
                        .HasColumnType("bigint")
                        .HasColumnName("MOTO_ID");

                    b.Property<long>("VagaId")
                        .HasColumnType("bigint")
                        .HasColumnName("VAGA_ID");

                    b.HasKey("Id");

                    b.HasIndex("MotoId");

                    b.HasIndex("VagaId");

                    b.ToTable("ALOCACAOMOTO", (string)null);
                });

            modelBuilder.Entity("GeoSense.API.Infrastructure.Persistence.Defeito", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(2000)")
                        .HasColumnName("DESCRICAO");

                    b.Property<long>("MotoId")
                        .HasColumnType("bigint")
                        .HasColumnName("MOTO_ID");

                    b.Property<string>("TiposDefeitos")
                        .IsRequired()
                        .HasColumnType("nvarchar(2000)")
                        .HasColumnName("TIPOS_DEFEITOS");

                    b.HasKey("Id");

                    b.HasIndex("MotoId");

                    b.ToTable("DEFEITO", (string)null);
                });

            modelBuilder.Entity("GeoSense.API.Infrastructure.Persistence.Moto", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Chassi")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("CHASSI");

                    b.Property<string>("Modelo")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("MODELO");

                    b.Property<string>("Placa")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("PLACA");

                    b.Property<string>("ProblemaIdentificado")
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("PROBLEMA_IDENTIFICADO");

                    b.Property<long>("VagaId")
                        .HasColumnType("bigint")
                        .HasColumnName("VAGA_ID");

                    b.HasKey("Id");

                    b.HasIndex("Chassi")
                        .IsUnique();

                    b.HasIndex("Placa")
                        .IsUnique();

                    b.HasIndex("VagaId")
                        .IsUnique();

                    b.ToTable("MOTO", (string)null);
                });

            modelBuilder.Entity("GeoSense.API.Infrastructure.Persistence.Patio", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("NOME");

                    b.HasKey("Id");

                    b.ToTable("PATIO", (string)null);
                });

            modelBuilder.Entity("GeoSense.API.Infrastructure.Persistence.Usuario", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("EMAIL");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("NOME");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("SENHA");

                    b.Property<int>("Tipo")
                        .HasColumnType("int")
                        .HasColumnName("TIPO");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("USUARIO", (string)null);
                });

            modelBuilder.Entity("GeoSense.API.Infrastructure.Persistence.Vaga", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("Numero")
                        .HasColumnType("int")
                        .HasColumnName("NUMERO");

                    b.Property<long>("PatioId")
                        .HasColumnType("bigint")
                        .HasColumnName("PATIO_ID");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("STATUS");

                    b.Property<int>("Tipo")
                        .HasColumnType("int")
                        .HasColumnName("TIPO");

                    b.HasKey("Id");

                    b.HasIndex("PatioId");

                    b.HasIndex("Numero", "PatioId")
                        .IsUnique();

                    b.ToTable("VAGA", (string)null);
                });

            modelBuilder.Entity("GeoSense.API.Infrastructure.Persistence.AlocacaoMoto", b =>
                {
                    b.HasOne("GeoSense.API.Infrastructure.Persistence.Moto", "Moto")
                        .WithMany("Alocacoes")
                        .HasForeignKey("MotoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GeoSense.API.Infrastructure.Persistence.Vaga", "Vaga")
                        .WithMany("Alocacoes")
                        .HasForeignKey("VagaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Moto");

                    b.Navigation("Vaga");
                });

            modelBuilder.Entity("GeoSense.API.Infrastructure.Persistence.Defeito", b =>
                {
                    b.HasOne("GeoSense.API.Infrastructure.Persistence.Moto", "Moto")
                        .WithMany("Defeitos")
                        .HasForeignKey("MotoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Moto");
                });

            modelBuilder.Entity("GeoSense.API.Infrastructure.Persistence.Moto", b =>
                {
                    b.HasOne("GeoSense.API.Infrastructure.Persistence.Vaga", "Vaga")
                        .WithMany("Motos")
                        .HasForeignKey("VagaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Vaga");
                });

            modelBuilder.Entity("GeoSense.API.Infrastructure.Persistence.Vaga", b =>
                {
                    b.HasOne("GeoSense.API.Infrastructure.Persistence.Patio", "Patio")
                        .WithMany("Vagas")
                        .HasForeignKey("PatioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patio");
                });

            modelBuilder.Entity("GeoSense.API.Infrastructure.Persistence.Moto", b =>
                {
                    b.Navigation("Alocacoes");

                    b.Navigation("Defeitos");
                });

            modelBuilder.Entity("GeoSense.API.Infrastructure.Persistence.Patio", b =>
                {
                    b.Navigation("Vagas");
                });

            modelBuilder.Entity("GeoSense.API.Infrastructure.Persistence.Vaga", b =>
                {
                    b.Navigation("Alocacoes");

                    b.Navigation("Motos");
                });
#pragma warning restore 612, 618
        }
    }
}
